if exists('g:vscode')
    " VSCode extension
  set relativenumber
else
    " ordinary neovim
  set tabstop=2 softtabstop=2
  set shiftwidth=2
  set expandtab
  set smartindent
  set relativenumber
  set nu
  set hidden
  set noerrorbells
  set nowrap
  set incsearch

  set signcolumn=yes
  set colorcolumn=120
  "plugin section
  call plug#begin()
  " Initialize plugin system
  " - Automatically executes `filetype plugin indent on` and `syntax enable`.
  Plug 'EdenEast/nightfox.nvim' " Vim-Plug
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'
  Plug 'gruvbox-community/gruvbox'
  Plug 'wbthomason/packer.nvim'
  Plug 'neovim/nvim-lspconfig'
  Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build' }
  Plug 'preservim/nerdtree'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " Recommended updating the parsers on update
  Plug 'neovim/nvim-lspconfig'
  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/nvim-cmp'
  Plug 'saadparwaiz1/cmp_luasnip'
  call plug#end()
  colorscheme gruvbox 

  autocmd BufWritePre *.tsx,*.ts,*.jsx,*.js EslintFixAll
  lua require('telescope').setup{ extensions = {fzf = { fuzzy=true, override_generic_sorter=true, override_file_sorter=true,case_mode="smart_case"}}, defaults = { file_ignore_patterns = {"node_modules", "__tests__"} } }
  lua require('telescope').load_extension('fzf')
  "Remaps

  let mapleader = " "
  nnoremap <leader>ps :lua require('telescope.builtin').grep_string({ search = vim.fn.input("Grep for >")})<cr>
  nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
  nnoremap <leader>gf <cmd>lua require('telescope.builtin').git_files()<cr>
  nnoremap <leader>gs <cmd>lua require('telescope.builtin').git_status()<cr>
  nnoremap <leader>gb <cmd>lua require('telescope.builtin').git_branches()<cr>
  nnoremap <leader>n :NERDTreeFocus<CR>
  nnoremap <C-n> :NERDTree<CR>
  nnoremap <C-t> :NERDTreeToggle<CR>
  nnoremap <C-f> :NERDTreeFind<CR>
  " Use <c-space> to trigger completion.
 " if has('nvim')
  "  inoremap <silent><expr> <c-space> coc#refresh()
  "else
   " inoremap <silent><expr> <c-@> coc#refresh()
 " endif 
 " inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
  "inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
  "inoremap <expr> <C-j> coc#pum#visible() ? coc#pum#next(1) : "\<C-j>"
  "inoremap <expr> <C-k> coc#pum#visible() ? coc#pum#prev(1) : "\<C-k>"
  " Use ctrl-[hjkl] to select the active split!
  nmap <silent> <c-k> :wincmd k<CR>
  nmap <silent> <c-j> :wincmd j<CR>
  nmap <silent> <c-h> :wincmd h<CR>
  nmap <silent> <c-l> :wincmd l<CR>
" {{{ nvim-cmp
set completeopt=menu,menuone,noselect


lua <<EOF
  -- Set up nvim-cmp.
  local cmp = require'cmp'
  local map = vim.keymap.set

  local opts = { noremap = true, silent = true, buffer = 0 }

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
        -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      -- { name = 'vsnip' }, -- For vsnip users.
      { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
  })

  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })
local function config(_config)
	return vim.tbl_deep_extend("force", {
		on_attach = function()
		map("n","K",vim.lsp.buf.hover, opts )
    map("n", "gD", vim.lsp.buf.declaration, opts)
    map("n", "gd", vim.lsp.buf.definition, opts)
    map("n", "H", vim.diagnostic.open_float, opts)
    map("n", "gr", vim.lsp.buf.references, opts)
    map("n", "<C-k>", vim.lsp.buf.signature_help, opts)
    map("n", "gi", vim.lsp.buf.implementation, opts)

		--	nnoremap("<leader>vws", function() vim.lsp.buf.workspace_symbol() end)
		--	nnoremap("<leader>vd", function() vim.diagnostic.open_float() end)
		--	nnoremap("[d", function() vim.diagnostic.goto_next() end)
		--	nnoremap("]d", function() vim.diagnostic.goto_prev() end)
		--	nnoremap("<leader>vca", function() vim.lsp.buf.code_action() end)
		--	nnoremap("<leader>vco", function() vim.lsp.buf.code_action({
    --            filter = function(code_action)
    --                if not code_action or not code_action.data then
    --                    return false
     --               end

       --             local data = code_action.data.id
         --           return string.sub(data, #data - 1, #data) == ":0"
           --     end,
             --   apply = true
       --     }) end)
		--	nnoremap("<leader>vrr", function() vim.lsp.buf.references() end)
		--	nnoremap("<leader>vrn", function() vim.lsp.buf.rename() end)
		--	inoremap("<C-h>", function() vim.lsp.buf.signature_help() end)
		end,
	}, _config or {})
end

-- require("lspconfig").eslint.setup(config())
require("lspconfig").tsserver.setup(config())
  -- who even uses this?
require("lspconfig").rust_analyzer.setup(config({
	cmd = { "rustup", "run", "nightly", "rust-analyzer" },
	--[[
    settings = {
        rust = {
            unstable_features = true,
            build_on_save = false,
            all_features = true,
        },
    }
    --]]
}))
EOF

endif

